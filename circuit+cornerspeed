from tkinter import Button, Tk
import fastf1
import numpy as np
from matplotlib import pyplot as plt

jaar = input("Kies jaartal: ")
jaar = int(jaar)
gp = input("Kies Grand Prix: ")
sessie = "Race"
ronde = input("Kies een ronde: ")
ronde = int(ronde)
coureur = input("Kies een coureur: ")
coureur2 = input("Kies een tweede coureur: ")

session = fastf1.get_session(jaar, gp, sessie)
session.load(laps=True)

circuit_info = session.get_circuit_info()
lap = session.laps.pick_driver(coureur).pick_lap(ronde)
lap2 = session.laps.pick_driver(coureur2).pick_lap(ronde)
pos = lap.get_pos_data()
car_data = lap.get_car_data().add_distance()
car_data2 = lap2.get_car_data().add_distance()
corner_margin = 50

label1 = lap['Driver'].to_string(index=False), lap['DriverNumber'].to_string(index=False)
label2 = lap2['Driver'].to_string(index=False), lap2['DriverNumber'].to_string(index=False)

fig, ax = plt.subplots(figsize=(10, 5), facecolor="white")

def rotate(xy, *, angle):
    rot_mat = np.array([[np.cos(angle), np.sin(angle)],
                        [-np.sin(angle), np.cos(angle)]])
    return np.matmul(xy, rot_mat)

for _, corner in circuit_info.corners.iterrows():
    corner_distance = corner['Distance']
    corner_numbers = f"{corner['Number']}{corner['Letter']}"

def on_button_click(corner_number, corner_distance):
    fig, ax = plt.subplots()
    ax.plot(car_data['Distance'], car_data['Speed'], color="green", label=label1)
    ax.plot(car_data2['Distance'], car_data2['Speed'], color="blue", label=label2)
    ax.set_xlim(corner_distance - corner_margin, corner_distance + corner_margin)
    ax.axvline(x=corner_distance, linestyle='dotted', color='grey')
    ax.text(corner_distance, car_data['Speed'].min() - 30, corner_number,
            va='center_baseline', ha='center', size='small')

    ax.set_xlabel('Afstand in meters')
    ax.set_ylabel('Snelheid in km/h')

    ax.legend()
    plt.show()

track = pos.loc[:, ('X', 'Y')].to_numpy()
track_angle = circuit_info.rotation / 180 * np.pi
offset_vector = [500, 0]
rotated_track = rotate(track, angle=track_angle)
plt.plot(rotated_track[:, 0], rotated_track[:, 1], color='tab:orange')

root = Tk()

for _, corner in circuit_info.corners.iterrows():
    txt = f"{corner['Number']}{corner['Letter']}"
    offset_angle = corner['Angle'] / 180 * np.pi
    offset_x, offset_y = rotate(offset_vector, angle=offset_angle)
    text_x = corner['X'] + offset_x
    text_y = corner['Y'] + offset_y
    text_x, text_y = rotate([text_x, text_y], angle=track_angle)
    track_x, track_y = rotate([corner['X'], corner['Y']], angle=track_angle)
    plt.scatter(text_x, text_y, color="black", s=140)
    plt.plot([track_x, text_x], [track_y, text_y], color="green")
    plt.text(text_x, text_y, txt, va='center_baseline', ha='center', size='small', color="orange")

    ax.axis('off')
    ax.set_title(gp)

    button = Button(root, text=txt, command=lambda corner_number=corner['Number'], corner_distance=corner['Distance']: on_button_click(corner_number, corner_distance))
    button.pack()

plt.show()
root.mainloop()
